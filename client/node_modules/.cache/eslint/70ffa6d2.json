[{"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\main.js":"1","C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\router.js":"2","C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\App.vue":"3","C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\views\\Map.vue":"4","C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\views\\MapNearbyLocations.vue":"5","C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\public\\map.js":"6"},{"size":410,"mtime":1699550908103,"results":"7","hashOfConfig":"8"},{"size":486,"mtime":1699613953820,"results":"9","hashOfConfig":"8"},{"size":419,"mtime":1699618476346,"results":"10","hashOfConfig":"8"},{"size":2410,"mtime":1699724049963,"results":"11","hashOfConfig":"8"},{"size":194,"mtime":1699614019774,"results":"12","hashOfConfig":"8"},{"size":3913,"mtime":1699723958914,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1105boo",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"34","usedDeprecatedRules":"17"},"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\main.js",[],[],[],"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\router.js",[],[],"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\App.vue",[],[],[],"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\views\\Map.vue",[],[],"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\src\\views\\MapNearbyLocations.vue",[],[],"C:\\Users\\joelm\\Desktop\\Group-20-Distributed-Systems\\Patient Client\\group-20-distributed-systems-patient-client\\client\\public\\map.js",["35","36","37","38","39","40","41","42","43","44","45"],[],"let map\r\nlet service\r\nlet infowindow\r\n\r\nlet testVariableUserLocation\r\nlet directionsService\r\nlet directionsRenderer\r\n\r\nasync function initMap() {\r\n  // const watchId = navigator.geolocation.watchPosition(async position => {\r\n  // navigator.geolocation.getCurrentPosition(position => {)\r\n  // NOTE: If 'blinking update' bug continues to grow as program is developed, switch to 'navigator.geolocation.getCurrentPosition()'\r\n  const watchId = navigator.geolocation.watchPosition(async position => { // NOTE: Fix this bug today: Try walking outside with phone using 'getCurrentPos' for real-time updating\r\n    const { latitude, longitude } = position.coords\r\n    const userGlobalCoordinates = { lat: latitude, lng: longitude }\r\n    testVariableUserLocation = { lat: latitude, lng: longitude }\r\n\r\n    localStorage.setItem('userGlobalCoordinates', userGlobalCoordinates) //\r\n\r\n    directionsService = new google.maps.DirectionsService()\r\n    directionsRenderer = new google.maps.DirectionsRenderer()\r\n\r\n    // @ts-ignore\r\n    const { Map } = await google.maps.importLibrary('maps')\r\n    const { AdvancedMarkerElement } = await google.maps.importLibrary('marker')\r\n\r\n    map = new Map(document.getElementById('map'), {\r\n      zoom: 7,\r\n      center: userGlobalCoordinates,\r\n      mapId: 'DEMO_MAP_ID'\r\n    })\r\n\r\n    directionsRenderer.setMap(map)\r\n\r\n    // SOLUTION: Make map refresh like geolocation.watchPosition does\r\n    let selectedRadius = document.getElementById('radius-data').innerHTML\r\n\r\n    if (!selectedRadius) {\r\n      selectedRadius = 10000\r\n      // localStorage.setItem('radius-data', selectedRadius)\r\n    }\r\n\r\n    console.warn(selectedRadius)\r\n    // Previous radius value: '100000'\r\n\r\n    const request = {\r\n      location: userGlobalCoordinates,\r\n      radius: selectedRadius,\r\n      type: ['dentist']\r\n    }\r\n\r\n    service = new google.maps.places.PlacesService(map)\r\n    service.nearbySearch(request, callback)\r\n\r\n    const userIcon = document.createElement('img')\r\n    userIcon.src = 'https://i.ibb.co/cFB7cMR/User-Marker-Icon.png'\r\n\r\n    // The marker that represents user's current global position\r\n    const marker = new AdvancedMarkerElement({\r\n      map: map,\r\n      position: userGlobalCoordinates,\r\n      content: userIcon,\r\n      title: 'Your Position'\r\n    })\r\n    console.warn(marker)\r\n  })\r\n  console.warn(watchId)\r\n}\r\n\r\nfunction callback(results, status) {\r\n  if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n    for (var i = 0; i < results.length; i++) {\r\n      createMarker(results[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction createMarker(place) {\r\n  const marker = new google.maps.Marker({\r\n    map: map,\r\n    position: place.geometry.location\r\n  })\r\n\r\n  // NOTE: This checks when user clicks 'OK' on popup --> Research on how to check when\r\n  google.maps.event.addListener(marker, 'click', function () {\r\n    const selectedDentalClinicDestination = marker.position\r\n    calcRoute(testVariableUserLocation, selectedDentalClinicDestination, directionsService, directionsRenderer)\r\n\r\n    alert(place.name)\r\n    window.open(place.photos[0].getUrl(), '_blank') // NOTE: It only works for a couple of photos (most likely because only PNG is supported) - Conduct further research on this issue later\r\n    infowindow.open(map, this)\r\n  })\r\n}\r\n\r\nfunction calcRoute(userGlobalCoordinates, dentistDestination, directionsService, directionsRenderer) {\r\n  // var selectedMode = document.getElementById('mode').value; // NOTE: Create HTML frontend to select mode\r\n  console.warn('calc route in map.js!')\r\n  const request = {\r\n    origin: userGlobalCoordinates,\r\n    destination: dentistDestination,\r\n    // travelMode: google.maps.TravelMode[selectedMode]\r\n    travelMode: 'DRIVING'\r\n  }\r\n  directionsService.route(request, function (response, status) {\r\n    if (status === 'OK') {\r\n      directionsRenderer.setDirections(response)\r\n    }\r\n  })\r\n}\r\n\r\ninitMap()\r\nexport { initMap }\r\n",{"ruleId":"46","severity":2,"message":"47","line":20,"column":29,"nodeType":"48","messageId":"49","endLine":20,"endColumn":35},{"ruleId":"46","severity":2,"message":"47","line":21,"column":30,"nodeType":"48","messageId":"49","endLine":21,"endColumn":36},{"ruleId":"46","severity":2,"message":"47","line":24,"column":27,"nodeType":"48","messageId":"49","endLine":24,"endColumn":33},{"ruleId":"46","severity":2,"message":"47","line":25,"column":45,"nodeType":"48","messageId":"49","endLine":25,"endColumn":51},{"ruleId":"46","severity":2,"message":"47","line":52,"column":19,"nodeType":"48","messageId":"49","endLine":52,"endColumn":25},{"ruleId":"50","severity":1,"message":"51","line":60,"column":7,"nodeType":"52","messageId":"53","endLine":60,"endColumn":15,"fix":"54"},{"ruleId":"46","severity":2,"message":"47","line":71,"column":18,"nodeType":"48","messageId":"49","endLine":71,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":72,"column":10,"nodeType":"57","messageId":"58","endLine":72,"endColumn":19,"fix":"59"},{"ruleId":"46","severity":2,"message":"47","line":79,"column":22,"nodeType":"48","messageId":"49","endLine":79,"endColumn":28},{"ruleId":"50","severity":1,"message":"51","line":80,"column":5,"nodeType":"52","messageId":"53","endLine":80,"endColumn":13,"fix":"60"},{"ruleId":"46","severity":2,"message":"47","line":85,"column":3,"nodeType":"48","messageId":"49","endLine":85,"endColumn":9},"no-undef","'google' is not defined.","Identifier","undef","object-shorthand","Expected property shorthand.","Property","expectedPropertyShorthand",{"range":"61","text":"62"},"no-var","Unexpected var, use let or const instead.","VariableDeclaration","unexpectedVar",{"range":"63","text":"64"},{"range":"65","text":"62"},[2170,2178],"map",[2457,2460],"let",[2624,2632]]